services:
  db:
    image: postgres:17
    container_name: game-insight-db
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=game_insight_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d game_insight_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2-alpine
    container_name: game-insight-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: ./src/backend/Dockerfile
    container_name: game-insight-backend
    command: uvicorn src.backend.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app

  frontend:
    build:
      context: .
      dockerfile: ./src/frontend/Dockerfile
    container_name: game-insight-frontend
    ports:
      - "8501:8501"
    volumes:
      - ./src:/app/src
    depends_on:
      - backend

  worker:
    build:
      context: .
      dockerfile: ./src/backend/Dockerfile # Reusing backend Dockerfile
    container_name: game-insight-worker
    command: celery -A src.backend.celery_app worker --loglevel=info
    volumes:
      - ./src:/app/src
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app

  scheduler:
    build:
      context: .
      dockerfile: ./src/backend/Dockerfile # Reusing backend Dockerfile
    container_name: game-insight-scheduler
    command: celery -A src.backend.celery_app beat --loglevel=info
    volumes:
      - ./src:/app/src
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app

  test:
    build:
      context: .
      dockerfile: ./src/backend/Dockerfile
    container_name: game-insight-test-runner
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - BACKEND_BASE_URL=http://backend:8000
    command: ["pytest", "/app/tests"]

volumes:
  postgres_data:
