services:
  db:
    image: postgres:17
    container_name: game-insight-db
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=game_insight_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d game_insight_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2-alpine
    container_name: game-insight-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5


  backend:
    build:
      context: .
      dockerfile: ./src/backend/Dockerfile
    container_name: game-insight-backend
    command: >
      sh -c "
      echo 'PYTHONPATH: ' \"$${PYTHONPATH}\";
      echo 'Applying database migrations (Alembic) if needed...';
      if command -v alembic >/dev/null 2>&1; then
        ATTEMPTS=0;
        until [ $$ATTEMPTS -ge 5 ]; do
          if alembic -c /app/src/backend/alembic.ini upgrade head; then
            echo 'Alembic migrations applied successfully.'; break;
          else
            ATTEMPTS=$$((ATTEMPTS+1));
            echo \"Alembic upgrade failed (attempt $$ATTEMPTS). Retrying in 5s...\";
            sleep 5;
          fi;
        done;
      else
        echo 'Alembic command not found. Skipping migrations.';
      fi;
      exec uvicorn src.backend.main:app --host 0.0.0.0 --port 8000 --reload
      "
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app
      - USE_ALEMBIC=1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 1s
      retries: 3
      start_period: 60s

  flower:
    build:
      context: .
      dockerfile: ./src/backend/Dockerfile
    container_name: game-insight-flower
    command: celery -A src.backend.celery_app flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  celery-beat:
    build:
      context: .
      dockerfile: ./src/backend/Dockerfile
    container_name: game-insight-celery-beat
    command: >
      celery -A src.backend.celery_app beat 
      --loglevel=INFO 
      --scheduler redbeat.RedBeatScheduler
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: .
      dockerfile: ./src/frontend/Dockerfile
    container_name: game-insight-frontend
    ports:
      - "8501:8501"
    volumes:
      - ./src:/app/src
    depends_on:
      backend:
        condition: service_healthy
    # Removed fluentd dependency; using json-file logging for Portainer
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  worker:
    build:
      context: .
      dockerfile: ./src/worker/Dockerfile
    container_name: game-insight-worker
    command: celery -A src.backend.celery_app worker --loglevel=info
    volumes:
      - ./src:/app/src
    depends_on:
      backend:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  test:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: game-insight-test-runner
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - BACKEND_BASE_URL=http://backend:8000
    command: ["pytest", "/app/tests"]
    # logging:
    #   driver: "fluentd"
    #   options:
    #     fluentd-address: localhost:24224
    #     tag: docker.{{.Name}}

  backfill:
    build:
      context: .
      dockerfile: ./src/backend/Dockerfile # Reusing backend Dockerfile
    container_name: game-insight-backfill
    command: python src/scripts/backfill_data.py
    volumes:
      - ./src:/app/src
    depends_on:
      backend:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/app
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    command: --http-enabled
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

volumes:
  postgres_data:
  portainer_data: